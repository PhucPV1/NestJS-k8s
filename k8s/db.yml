apiVersion: v1
kind: PersistentVolumeClaim # Create PVC
metadata:
  name: postgres-volume-claim # Sets PVC's name
  namespace: deploy
  labels:
    app: postgres # Defines app to create PVC for
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi # Sets PVC's size
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-secret
  namespace: deploy
  labels:
    app: postgres
data:
  POSTGRES_DB: test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: '123456'
---
apiVersion: apps/v1
kind: Deployment # Create a deployment
metadata:
  name: postgres # Set the name of the deployment
  namespace: deploy
spec:
  replicas: 1 # Set 3 deployment replicas
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:12.10 # Docker image
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432 # Exposing the container port 5432 for PostgreSQL client connections.
          envFrom:
            - configMapRef:
                name: postgres-secret # Using the ConfigMap postgres-secret
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdata
      volumes:
        - name: postgresdata
          persistentVolumeClaim:
            claimName: postgres-volume-claim
---
apiVersion: v1
kind: Service # Create service
metadata:
  name: postgres # Sets the service name
  namespace: deploy
  labels:
    app: postgres # Defines app to create service for
spec:
  type: LoadBalancer # Sets the service type
  ports:
    - port: 5432 # Sets the port to run the postgres application
      targetPort: 5432
  externalIPs:
    - 192.168.1.127
  selector:
    app: postgres
# ---
# kind: Endpoints
# apiVersion: v1
# metadata:
#   name: postgres
# subsets:
#   - addresses:
#       - ip: 10.10.2.118
#     ports:
#       - port: 5432
#         name: postgres
